import bytes from './bytes'

test('lib/bytes/at', () => {
  expect(bytes.at('0x1234', 0)).toBe(18)
})

test('lib/bytes/flatten', () => {
  expect(bytes.flatten(['0x12', '0x32', '0x45'])).toBe('0x123245')
})

test('lib/bytes/slice', () => {
  expect(bytes.slice(0, 2, '0x123456')).toBe('0x1234')
})

test('lib/bytes/reverse', () => {
  expect(bytes.reverse('0x123456')).toBe('0x563412')
})

test('lib/bytes/pad', () => {
  expect(bytes.pad(6, '0x12')).toBe('0x000000000012')
})

test('lib/bytes/padRight', () => {
  expect(bytes.padRight(6, '0x12')).toBe('0x120000000000')
})

test('lib/bytes/toArray', () => {
  expect(bytes.toArray('0x121314')).toEqual([18, 19, 20])
})

test('lib/bytes/fromArray', () => {
  expect(bytes.fromArray([18, 19, 20])).toEqual('0x121314')
  expect(
    bytes.fromArray([
      249,
      2,
      109,
      184,
      235,
      0,
      97,
      115,
      109,
      1,
      0,
      0,
      0,
      1,
      13,
      3,
      96,
      1,
      127,
      0,
      96,
      2,
      127,
      127,
      0,
      96,
      0,
      0,
      2,
      29,
      2,
      3,
      101,
      110,
      118,
      6,
      112,
      114,
      105,
      110,
      116,
      115,
      0,
      0,
      3,
      101,
      110,
      118,
      8,
      112,
      114,
      105,
      110,
      116,
      115,
      95,
      108,
      0,
      1,
      3,
      4,
      3,
      2,
      2,
      0,
      4,
      5,
      1,
      112,
      1,
      1,
      1,
      5,
      3,
      1,
      0,
      2,
      6,
      21,
      3,
      127,
      1,
      65,
      144,
      136,
      4,
      11,
      127,
      0,
      65,
      144,
      136,
      4,
      11,
      127,
      0,
      65,
      134,
      8,
      11,
      7,
      52,
      5,
      6,
      109,
      101,
      109,
      111,
      114,
      121,
      2,
      0,
      11,
      95,
      95,
      104,
      101,
      97,
      112,
      95,
      98,
      97,
      115,
      101,
      3,
      1,
      10,
      95,
      95,
      100,
      97,
      116,
      97,
      95,
      101,
      110,
      100,
      3,
      2,
      4,
      105,
      110,
      105,
      116,
      0,
      3,
      5,
      104,
      101,
      108,
      108,
      111,
      0,
      4,
      10,
      69,
      3,
      2,
      0,
      11,
      2,
      0,
      11,
      61,
      1,
      1,
      127,
      35,
      0,
      65,
      16,
      107,
      34,
      1,
      36,
      0,
      65,
      128,
      8,
      16,
      0,
      32,
      1,
      65,
      32,
      58,
      0,
      15,
      32,
      1,
      65,
      15,
      106,
      65,
      1,
      16,
      1,
      32,
      0,
      16,
      0,
      32,
      1,
      65,
      10,
      58,
      0,
      14,
      32,
      1,
      65,
      14,
      106,
      65,
      1,
      16,
      1,
      32,
      1,
      65,
      16,
      106,
      36,
      0,
      11,
      11,
      13,
      1,
      0,
      65,
      128,
      8,
      11,
      6,
      104,
      101,
      108,
      108,
      111,
      0,
      185,
      1,
      125,
      91,
      10,
      32,
      32,
      32,
      32,
      123,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      110,
      97,
      109,
      101,
      34,
      58,
      32,
      34,
      105,
      110,
      105,
      116,
      34,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      105,
      110,
      112,
      117,
      116,
      115,
      34,
      58,
      32,
      91,
      93,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      111,
      117,
      116,
      112,
      117,
      116,
      115,
      34,
      58,
      32,
      91,
      93,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      34,
      58,
      32,
      34,
      102,
      97,
      108,
      115,
      101,
      34,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      116,
      121,
      112,
      101,
      34,
      58,
      32,
      34,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      34,
      10,
      32,
      32,
      32,
      32,
      125,
      44,
      10,
      32,
      32,
      32,
      32,
      123,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      110,
      97,
      109,
      101,
      34,
      58,
      32,
      34,
      104,
      101,
      108,
      108,
      111,
      34,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      105,
      110,
      112,
      117,
      116,
      115,
      34,
      58,
      32,
      91,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      123,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      110,
      97,
      109,
      101,
      34,
      58,
      32,
      34,
      110,
      97,
      109,
      101,
      34,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      116,
      121,
      112,
      101,
      34,
      58,
      32,
      34,
      115,
      116,
      114,
      105,
      110,
      103,
      34,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      125,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      93,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      111,
      117,
      116,
      112,
      117,
      116,
      115,
      34,
      58,
      32,
      91,
      93,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      34,
      58,
      32,
      34,
      116,
      114,
      117,
      101,
      34,
      44,
      10,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      34,
      116,
      121,
      112,
      101,
      34,
      58,
      32,
      34,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      34,
      10,
      32,
      32,
      32,
      32,
      125,
      10,
      93,
      10
    ])
  ).toEqual(
    '0xf9026db8eb0061736d01000000010d0360017f0060027f7f00600000021d0203656e76067072696e7473000003656e76087072696e74735f6c00010304030202000405017001010105030100020615037f01419088040b7f00419088040b7f004186080b073405066d656d6f727902000b5f5f686561705f6261736503010a5f5f646174615f656e64030204696e697400030568656c6c6f00040a450302000b02000b3d01017f230041106b220124004180081000200141203a000f2001410f6a41011001200010002001410a3a000e2001410e6a41011001200141106a24000b0b0d01004180080b0668656c6c6f00b9017d5b0a202020207b0a2020202020202020226e616d65223a2022696e6974222c0a202020202020202022696e70757473223a205b5d2c0a2020202020202020226f757470757473223a205b5d2c0a202020202020202022636f6e7374616e74223a202266616c7365222c0a20202020202020202274797065223a202266756e6374696f6e220a202020207d2c0a202020207b0a2020202020202020226e616d65223a202268656c6c6f222c0a202020202020202022696e70757473223a205b0a2020202020202020202020207b0a20202020202020202020202020202020226e616d65223a20226e616d65222c0a202020202020202020202020202020202274797065223a2022737472696e67220a2020202020202020202020207d0a20202020202020205d2c0a2020202020202020226f757470757473223a205b5d2c0a202020202020202022636f6e7374616e74223a202274727565222c0a20202020202020202274797065223a202266756e6374696f6e220a202020207d0a5d0a'
  )
})

test('lib/bytes/toUint8Array', () => {
  expect(bytes.toUint8Array('0x121314')).toEqual(new Uint8Array([18, 19, 20]))
})

test('lib/bytes/fromUint8Array', () => {
  expect(bytes.fromUint8Array(new Uint8Array([18, 19, 20]))).toEqual('0x121314')
})

test('lib/bytes/fromNumber', () => {
  expect(bytes.fromNumber(18)).toEqual('0x12')
})

test('lib/bytes/toNumber', () => {
  expect(bytes.toNumber('0x12')).toBe(18)
})

test('lib/bytes/concat', () => {
  expect(bytes.concat('0x1234', '0x5678')).toBe('0x12345678')
})

test('lib/bytes/fromNat', () => {
  expect(bytes.fromNat('0x0')).toBe('0x')
  expect(bytes.fromNat('0x01')).toBe('0x01')
  expect(bytes.fromNat('0x123')).toBe('0x0123')
})

test('lib/bytes/toNat', () => {
  expect(bytes.toNat('0x0123')).toBe('0x123')
  expect(bytes.toNat('0x2123')).toBe('0x2123')
})

test('lib/bytes/fromAscii', () => {
  expect(bytes.fromAscii('ascii')).toBe('0x6173636969')
  expect(bytes.fromAscii('test')).toBe('0x74657374')
})

test('lib/bytes/toAscii', () => {
  expect(bytes.toAscii('0x6173636969')).toBe('ascii')
  expect(bytes.toAscii('0x74657374')).toBe('test')
})

test('lib/bytes/fromString', () => {
  expect(bytes.fromString('测试')).toBe('0xe6b58be8af95')
  expect(bytes.fromString('测试另类')).toBe('0xe6b58be8af95e58fa6e7b1bb')
})

test('lib/bytes/toString', () => {
  expect(bytes.toString('0xe6b58be8af95')).toBe('测试')
  expect(bytes.toString('0xe6b58be8af95e58fa6e7b1bb')).toBe('测试另类')
})
